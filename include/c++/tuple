// SPDX-License-Identifier: BSD-3-Clause
#ifndef TUPLE
#define TUPLE

#include <utility>
#include <array>
#include <type_traits>
#include <bits/move.hxx>
#include <bits/rangeAccess.hxx>

namespace std
{
	template<typename... elements_t> struct tuple;

	namespace impl
	{
		template<typename T> struct is_empty_non_tuple : std::is_empty<T> { };
		template<typename elm0_t, typename... elms_t>
			struct is_empty_non_tuple<std::tuple<elm0_t, elms_t...>> : false_type { };

		template<typename T> using empty_not_final = conditional_t<is_final_v<T>, false_type,
			is_empty_non_tuple<T>>;

		template<std::size_t idx, typename head_t, bool = empty_not_final<head_t>::value>
			struct headBase_t;

		template<std::size_t idx, typename head_t> struct headBase_t<idx, head_t, true> :
			public head_t
		{
			constexpr headBase_t() : head_t{} { }
			constexpr headBase_t(const head_t &head) : head_t{head} { }
			constexpr headBase_t(const headBase_t &) = default;
			constexpr headBase_t(headBase_t &&) = default;

			template<typename uHead_t> constexpr headBase_t(uHead_t &&head) :
				head_t(std::forward<uHead_t>(head)) { }

			constexpr static head_t &head(headBase_t &base) noexcept { return base; }
			constexpr static const head_t &head(const headBase_t &base) noexcept { return base; }
		};

		template<std::size_t idx, typename head_t>
			struct headBase_t<idx, head_t, false>
		{
			head_t _head;

			constexpr headBase_t() : _head{} { }
			constexpr headBase_t(const head_t &head) : _head{head} { }
			constexpr headBase_t(const headBase_t &) = default;
			constexpr headBase_t(headBase_t &&) = default;

			template<typename uHead_t> constexpr headBase_t(uHead_t &&head) :
				_head(std::forward<uHead_t>(head)) { }

			constexpr static head_t &head(headBase_t &base) noexcept { return base._head; }
			constexpr static const head_t &head(const headBase_t &base) noexcept { return base._head; }
		};

		template<std::size_t idx, typename... elements_t> struct tuple_t;

		template<std::size_t idx, typename head_t, typename... tail_t>
			struct tuple_t<idx, head_t, tail_t...> :
			public tuple_t<idx + 1, tail_t...>, private headBase_t<idx, head_t>
		{
			template<std::size_t, typename...> friend struct tuple_t;

			using inherited_t = tuple_t<idx + 1, tail_t...>;
			using base_t = headBase_t<idx, head_t>;

			constexpr static head_t &head(tuple_t &tuple) noexcept { return base_t::head(tuple); }
			constexpr static const head_t &head(const tuple_t &tuple) noexcept { return base_t::head(tuple); }
			constexpr static inherited_t &tail(tuple_t &tuple) noexcept { return tuple; }
			constexpr static const inherited_t &tail(const tuple_t &tuple) noexcept { return tuple; }

			constexpr tuple_t() : inherited_t{}, base_t{} { }
			constexpr explicit tuple_t(const head_t &head, const tail_t &...tail) :
				inherited_t{tail...}, base_t{head} { }
			constexpr tuple_t(const tuple_t &) = default;

			template<typename uHead_t, typename... uTail_t, typename =
				enable_if_t<sizeof...(tail_t) == sizeof...(uTail_t)>>
			constexpr explicit tuple_t(uHead_t &&head, uTail_t &&...tail) :
				inherited_t{std::forward<uTail_t>(tail)...},
				base_t{std::forward<uHead_t>(head)} { }

			constexpr tuple_t(tuple_t &&tuple) noexcept(is_nothrow_move_constructible_v<head_t> &&
				is_nothrow_move_constructible_v<inherited_t>) :
				inherited_t{std::move(tail(tuple))}, base_t{std::forward<head_t>(head(tuple))} { }

			template<typename... uElements_t>
				constexpr tuple_t(const tuple_t<idx, uElements_t...> &tuple) :
				inherited_t{tuple_t<idx, uElements_t...>::tail(tuple)},
				base_t{tuple_t<idx, uElements_t...>::head(tuple)} { }

			template<typename uHead_t, typename... uTail_t>
				constexpr tuple_t(tuple_t<idx, uHead_t, uTail_t...> &&tuple) :
				inherited_t{std::move(tuple_t<idx, uHead_t, uTail_t...>::tail(tuple))},
				base_t{std::forward<uHead_t>(tuple_t<idx, uHead_t, uTail_t...>::head(tuple))} { }

			tuple_t &operator =(const tuple_t &) = delete;

			template<typename... uElements_t>
				constexpr void assign(const tuple_t<idx, uElements_t...> &tuple)
			{
				head(*this) = tuple_t<idx, uElements_t...>::head(tuple);
				tail(*this).assign(tuple_t<idx, uElements_t...>::tail(tuple));
			}

			template<typename uHead_t, typename... uTail_t>
				constexpr void assign(tuple_t<idx, uHead_t, uTail_t...> &&tuple)
			{
				head(*this) = std::forward<uHead_t>(tuple_t<idx, uHead_t, uTail_t...>::head(tuple));
				tail(*this).assign(std::move(tuple_t<idx, uHead_t, uTail_t...>::tail(tuple)));
			}

		protected:
			constexpr void swap(tuple_t &tuple)
			{
				using std::swap;
				swap(head(*this), head(tuple));
				inherited_t::swap(tail(tuple));
			}
		};

		template<std::size_t idx, typename head_t> struct tuple_t<idx, head_t> :
			private headBase_t<idx, head_t>
		{
			template<std::size_t, typename...> friend struct tuple_t;

			using base_t = headBase_t<idx, head_t>;

			constexpr static head_t &head(tuple_t &tuple) noexcept { return base_t::head(tuple); }
			constexpr static const head_t &head(const tuple_t &tuple) noexcept { return base_t::head(tuple); }

			constexpr tuple_t() : base_t{} { }
			constexpr explicit tuple_t(const head_t &head) : base_t{head} { }
			template<typename uHead_t> constexpr explicit tuple_t(uHead_t &&head) :
				base_t{std::forward<uHead_t>(head)} { }
			constexpr tuple_t(const tuple_t &) = default;

			constexpr tuple_t(tuple_t &&tuple) noexcept(is_nothrow_move_constructible_v<head_t>) :
				base_t{std::forward<head_t>(head(tuple))} { }
			template<typename uHead_t> constexpr tuple_t(const tuple_t<idx, uHead_t> &tuple) :
				base_t{tuple_t<idx, uHead_t>::head(tuple)} { }
			template<typename uHead_t> constexpr tuple_t(tuple_t<idx, uHead_t> &&tuple) :
				base_t{std::forward<uHead_t>(tuple_t<idx, uHead_t>::head(tuple))} { }

			tuple_t &operator =(const tuple_t &) = delete;

			template<typename uHead_t> constexpr void assign(const tuple_t<idx, uHead_t> &tuple)
				{ head(*this) = tuple_t<idx, uHead_t>::head(tuple); }
			template<typename uHead_t> constexpr void assign(tuple_t<idx, uHead_t> &&tuple)
				{ head(*this) = std::forward<uHead_t>(tuple_t<idx, uHead_t>::head(tuple)); }

		protected:
			constexpr void swap(tuple_t &tuple)
			{
				using std::swap;
				swap(head(*this), head(tuple));
			}
		};

		template<bool, typename... types_t> struct tupleConstraints_t
		{
			template<typename... uTypes_t> constexpr static bool is_implicitly_constructible()
			{
				return and_v<std::is_constructible<types_t, uTypes_t>...,
					std::is_convertible<uTypes_t, types_t>...>;
			}

			template<typename... uTypes_t> constexpr static bool is_explicitly_constructible()
			{
				return and_v<std::is_constructible<types_t, uTypes_t>...,
					__not<__and<std::is_convertible<uTypes_t, types_t>...>>>;
			}

			constexpr static bool is_implicitly_default_constructable()
				{ return and_v<is_implicitly_default_constructible<types_t>...>; }

			constexpr static bool is_explicitly_default_constructable()
			{
				return and_v<std::is_default_constructible<types_t>...,
					__not<__and<is_implicitly_default_constructible<types_t>...>>>;
			}
		};

		template<typename... types_t>
			struct tupleConstraints_t<false, types_t...>
		{
			template<typename... uTypes_t> constexpr static bool is_implicitly_constructible() { return false; }
			template<typename... uTypes_t> constexpr static bool is_explicitly_constructible() { return false; }
		};
	} // namespace impl

	template<typename... elements_t> struct tuple :
		public impl::tuple_t<0, elements_t...>
	{
	private:
		using inherited_t = impl::tuple_t<0, elements_t...>;

		template<bool cond> using tcc_t = impl::tupleConstraints_t<cond, elements_t...>;
		template<bool dummy> using implicitDefaultCtor_t =
			enable_if_t<tcc_t<dummy>::is_implicitly_default_constructible(), bool>;
		template<bool dummy> using explicitDefaultCtor_t =
			enable_if_t<tcc_t<dummy>::is_explicitly_default_constructible(), bool>;
		template<bool cond, typename... args_t> using implicitCtor_t =
			enable_if_t<tcc_t<cond>::template is_implicitly_constructible<args_t...>(), bool>;
		template<bool cond, typename... args_t> using explicitCtor_t =
			enable_if_t<tcc_t<cond>::template is_explicitly_constructible<args_t...>(), bool>;

		template<typename... uElements_t> constexpr static
			enable_if_t<sizeof...(uElements_t) == sizeof...(elements_t), bool> assignable()
			{ return impl::and_v<is_assignable<elements_t &, uElements_t>...>; }

		template<typename... uElements_t> constexpr static bool nothrowAssignable()
			{ return impl::and_v<is_nothrow_assignable<elements_t &, uElements_t>...>; }

		template<typename... uElements_t> constexpr static bool nothrowConstructible()
			{ return impl::and_v<is_nothrow_constructible<elements_t, uElements_t>...>; }

		template<typename U> constexpr static bool validArgs()
			{ return sizeof...(elements_t) == 1 && !is_same_v<tuple, remove_cvref_t<U>>; }
		template<typename, typename, typename... tail_t> constexpr static bool validArgs()
			{ return sizeof...(tail_t) + 2 == sizeof...(elements_t); }

		template<typename tuple_t, typename = tuple, typename = remove_cvref_t<tuple_t>>
			struct useOtherCtor_t : false_type { };
		template<typename tuple_t, typename T, typename U> struct useOtherCtor_t<tuple_t, tuple<T>, tuple<U>>  :
			_bool_constant<is_convertible_v<tuple_t, T> || is_constructible_v<T, tuple_t>> { };
		template<typename tuple_t, typename T> struct useOtherCtor_t<tuple_t, tuple<T>, tuple<T>> : true_type { };

		template<typename tuple_t> constexpr static bool useOtherCtor() { return useOtherCtor_t<tuple_t>::value; }
		template<typename... uElements_t> constexpr static bool isNonEmpty() { return sizeof...(uElements_t); }

	public:
		// Constructors
		template<typename dummy = void, implicitDefaultCtor_t<is_void_v<dummy>> = true> constexpr tuple()
			noexcept(impl::and_v<is_nothrow_default_constructible<elements_t>...>) : inherited_t{} { }
		template<typename dummy = void, explicitDefaultCtor_t<is_void_v<dummy>> = false> constexpr explicit tuple()
			noexcept(impl::and_v<is_nothrow_default_constructible<elements_t>...>) : inherited_t{} { }
		template<bool notEmpty = isNonEmpty<elements_t...>(), implicitCtor_t<notEmpty, const elements_t &...> = true>
			constexpr tuple(const elements_t &...elements)
			noexcept(nothrowConstructible<const elements_t &...>()) : inherited_t{elements...} { }
		template<bool notEmpty = isNonEmpty<elements_t...>(), explicitCtor_t<notEmpty, const elements_t &...> = false>
			constexpr explicit tuple(const elements_t &...elements)
			noexcept(nothrowConstructible<const elements_t &...>()) : inherited_t{elements...} { }
		template<typename... uElements_t, bool valid = validArgs<uElements_t...>(),
			implicitCtor_t<valid, uElements_t...> = true> constexpr tuple(uElements_t &&...elements)
			noexcept(nothrowConstructible<uElements_t...>()) : inherited_t{std::forward<uElements_t>(elements)...} { }
		template<typename... uElements_t, bool valid = validArgs<uElements_t...>(),
			explicitCtor_t<valid, uElements_t...> = false> constexpr explicit tuple(uElements_t &&... elements)
			noexcept(nothrowConstructible<uElements_t...>()) : inherited_t{std::forward<uElements_t>(elements)...} { }
		constexpr tuple(const tuple &) = default;
		constexpr tuple(tuple &&) = default;
		template<typename... uElements_t, bool valid = sizeof...(elements_t) == sizeof...(uElements_t) &&
			!useOtherCtor<const tuple<uElements_t...> &>(), implicitCtor_t<valid, const uElements_t &...> = true>
			constexpr tuple(const tuple<uElements_t...> &tuple)
			noexcept(nothrowConstructible<const uElements_t &...>()) :
			inherited_t{static_cast<const impl::tuple_t<0, uElements_t...> &>(tuple)} { }
		template<typename... uElements_t, bool valid = sizeof...(elements_t) == sizeof...(uElements_t) &&
			!useOtherCtor<const tuple<uElements_t...> &>(), explicitCtor_t<valid, const uElements_t &...> = false>
			constexpr explicit tuple(const tuple<uElements_t...> &tuple)
			noexcept(nothrowConstructible<const uElements_t &...>()) :
			inherited_t{static_cast<const impl::tuple_t<0, uElements_t...> &>(tuple)} { }
		template<typename... uElements_t, bool valid = sizeof...(elements_t) == sizeof...(uElements_t) &&
			!useOtherCtor<tuple<uElements_t...> &&>(), implicitCtor_t<valid, uElements_t...> = true>
			constexpr tuple(tuple<uElements_t...> &&tuple) noexcept(nothrowConstructible<uElements_t...>()) :
			inherited_t{static_cast<impl::tuple_t<0, uElements_t...> &&>(tuple)} { }
		template<typename... uElements_t, bool valid = sizeof...(elements_t) == sizeof...(uElements_t) &&
			!useOtherCtor<tuple<uElements_t...> &&>(), explicitCtor_t<valid, uElements_t...> = false>
			constexpr explicit tuple(tuple<uElements_t...> &&tuple) noexcept(nothrowConstructible<uElements_t...>()) :
			inherited_t{static_cast<impl::tuple_t<0, uElements_t...> &&>(tuple)} { }

		// Assignment
		constexpr tuple &operator =(conditional_t<assignable<const elements_t &...>(), const tuple &,
			const impl::noneSuch_t &> tuple) noexcept(nothrowAssignable<const elements_t &...>())
		{
			impl::tuple_t<0, elements_t...>::assign(tuple);
			return *this;
		}

		constexpr tuple &operator =(conditional_t<assignable<elements_t...>(), tuple &&,
			impl::noneSuch_t &&> tuple) noexcept(nothrowAssignable<elements_t...>())
		{
			impl::tuple_t<0, elements_t...>::assign(std::move(tuple));
			return *this;
		}

		template<typename... uElements_t> constexpr enable_if_t<assignable<const uElements_t &...>(), tuple &>
			operator =(const tuple<uElements_t...> &tuple) noexcept(nothrowAssignable<const uElements_t &...>())
		{
			impl::tuple_t<0, elements_t...>::assign(tuple);
			return *this;
		}

		template<typename... uElements_t> constexpr enable_if_t<assignable<uElements_t...>(), tuple &>
			operator =(tuple<uElements_t...> &&tuple) noexcept(nothrowAssignable<uElements_t...>())
		{
			impl::tuple_t<0, elements_t...>::assign(std::move(tuple));
			return *this;
		}

		// Swap
		void swap(tuple &tuple) noexcept(impl::and_v<std::is_nothrow_swappable<elements_t>...>)
			{ inherited_t::swap(tuple); }
	};

	template<typename... types_t> tuple(types_t...) -> tuple<types_t...>;
	//template<typename T, typename U> tuple(pair<T, U>) -> tuple<T, U>;

	template<> struct tuple<>
	{
		tuple() = default;
		void swap(tuple &) noexcept { }
	};

	template<typename... elements_t> struct tuple_size<tuple<elements_t...>> :
		public integral_constant<std::size_t, sizeof...(elements_t)> { };
	template<typename T> const inline size_t tuple_size_v = tuple_size<T>::value;

	template<std::size_t i, typename head_t, typename... tail_t>
		struct tuple_element<i, tuple<head_t, tail_t...>> : tuple_element<i - 1, tuple<tail_t...>> { };
	template<typename head_t, typename... tail_t>
		struct tuple_element<0, tuple<head_t, tail_t...>> { using type = head_t; };

	template<size_t i> struct tuple_element<i, tuple<>>
		{ static_assert(i < tuple_size<tuple<>>::value, "tuple index is in range"); };

	namespace impl
	{
		template<std::size_t i, typename head_t, typename... tail_t> constexpr head_t &
			get(tuple_t<i, head_t, tail_t...> &tuple) noexcept
				{ return tuple_t<i, head_t, tail_t...>::head(tuple); }
		template<std::size_t i, typename head_t, typename... tail_t> constexpr const head_t &
			get(const tuple_t<i, head_t, tail_t...> &tuple) noexcept
				{ return tuple_t<i, head_t, tail_t...>::head(tuple); }
	} // namespace impl

	template<std::size_t i, typename... elements_t> constexpr tuple_element_t<i, tuple<elements_t...>> &
		get(tuple<elements_t...> &_tuple) noexcept { return impl::get<i>(_tuple); }
	template<std::size_t i, typename... elements_t> constexpr const tuple_element_t<i, tuple<elements_t...>> &
		get(const tuple<elements_t...> &_tuple) noexcept { return impl::get<i>(_tuple); }

	template<std::size_t i, typename... elements_t> constexpr tuple_element_t<i, tuple<elements_t...>> &&
		get(tuple<elements_t...> &&_tuple) noexcept
	{
		using element_t = tuple_element_t<i, tuple<elements_t...>>;
		return std::forward<element_t &&>(std::get<i>(_tuple));
	}

	template<std::size_t i, typename... elements_t> constexpr const tuple_element_t<i, tuple<elements_t...>> &&
		get(const tuple<elements_t...> &&_tuple) noexcept
	{
		using element_t = tuple_element_t<i, tuple<elements_t...>>;
		return std::forward<const element_t &&>(std::get<i>(_tuple));
	}

	namespace impl
	{
		template<typename head_t, size_t i, typename... tail_t> constexpr head_t &
			typeGet(tuple_t<i, head_t, tail_t...> &tuple) noexcept
				{ return tuple_t<i, head_t, tail_t...>::head(tuple); }
		template<typename head_t, size_t i, typename... tail_t> constexpr const head_t &
			typeGet(const tuple_t<i, head_t, tail_t...> &tuple) noexcept
				{ return tuple_t<i, head_t, tail_t...>::head(tuple); }
	} // namespace impl

	template<typename T, typename... types_t> constexpr T &get(tuple<types_t...> &tuple) noexcept
		{ return impl::typeGet<T>(tuple); }
	template<typename T, typename... types_t> constexpr const T &get(const tuple<types_t...> &tuple) noexcept
		{ return impl::typeGet<T>(tuple); }
	template<typename T, typename... types_t> constexpr T &&get(tuple<types_t...> &&tuple) noexcept
		{ return std::forward<T &&>(impl::typeGet<T>(tuple)); }
	template<typename T, typename... types_t> constexpr const T &&get(const tuple<types_t...> &&tuple) noexcept
		{ return std::forward<const T &&>(impl::typeGet<T>(tuple)); }

	template<typename... elements_t> constexpr tuple<elements_t &...> tie(elements_t &...args) noexcept
		{ return tuple<elements_t &...>(args...); }

	template<typename... elements_t> constexpr inline void
		swap(tuple<elements_t...> &x, tuple<elements_t...> &y) noexcept(noexcept(x.swap(y))) { x.swap(y); }
} // namespace std

#endif /*TUPLE*/
