// SPDX-License-Identifier: BSD-3-Clause
#ifndef ARRAY
#define ARRAY

#include <cstddef>
#include <type_traits>
#include <algorithm>
#include <bits/rangeAccess.hxx>

namespace std
{
	template<typename T, std::size_t N> struct array final
	{
	public:
		using value_type = T;
		using size_type = std::size_t;
		using difference_type = std::ptrdiff_t;
		using reference = T &;
		using const_reference = const T &;
		using pointer = T *;
		using const_pointer = const T *;
		using iterator = T *;
		using const_iterator = const T *;

		constexpr reference operator [](size_type pos) noexcept { return at(pos); }
		constexpr const_reference operator [](size_type pos) const noexcept { return at(pos); }

		constexpr pointer data() noexcept { return elems; }
		constexpr const_pointer data() const noexcept { return elems; }
		constexpr auto size() const noexcept { return N; }
		constexpr auto max_size() const noexcept { return N; }
		constexpr auto empty() const noexcept { return size() == 0; }

		constexpr iterator begin() noexcept { return {data()}; }
		constexpr const_iterator begin() const noexcept { return {data()}; }
		constexpr iterator end() noexcept { return {data() + N}; }
		constexpr const_iterator end() const noexcept { return {data() + N}; }
		constexpr const_iterator cbegin() const noexcept { return {data()}; }
		constexpr const_iterator cend() const noexcept { return {data() + N}; }

		constexpr reference at(size_type pos) noexcept
		{
			//static_assert(pos < size());
			return elems[pos];
		}

		constexpr const_reference at(size_type pos) const noexcept
		{
			//static_assert(pos < size());
			return elems[pos];
		}

		constexpr reference front() noexcept { return *begin(); }
		constexpr const_reference front() const noexcept { return *begin(); }
		constexpr reference back() noexcept { return N ? *(end() - 1) : *end(); }
		constexpr const_reference back() const noexcept { return N ? *(end() - 1) : *end(); }

		constexpr void fill(const value_type &value) { std::fill_n(begin(), size(), value); }
		constexpr void swap(array &other) noexcept(std::is_nothrow_swappable_v<T>)
			{ std::swap_ranges(begin() ,end(), other.begin()); }

		T elems[N];
	};

	template<typename T, typename... Us> array(T, Us...) ->
		array<enable_if_t<(is_same_v<T, Us> && ...), T>, 1 + sizeof...(Us)>;

	template<typename> struct tuple_size;
	template<typename T, size_t N> struct tuple_size<array<T, N>> : public integral_constant<std::size_t, N> { };

	template<size_t, typename> struct tuple_element;
	template<size_t idx, typename T, size_t N> struct tuple_element<idx, array<T, N>>
	{
		static_assert(idx < N, "index is out of bounds");
		using type = T;
	};
} // namespace std

#endif /*ARRAY*/
