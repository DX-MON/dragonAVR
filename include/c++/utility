// SPDX-License-Identifier: BSD-3-Clause
#ifndef UTILITY
#define UTILITY

#include <type_traits>
#include <bits/pair.hxx>
#include <bits/move.hxx>

namespace std
{
	template<typename> struct tuple_size;

	namespace impl
	{
		template<typename T, typename U = remove_cv_t<T>, typename = enable_if_t<is_same_v<T, U>>,
			size_t = tuple_size<T>::value> using enable_if_has_tuple_size = T;
	} // namespace impl

	template<typename T> struct tuple_size<const impl::enable_if_has_tuple_size<T>> : public tuple_size<T> { };
	template<typename T> struct tuple_size<volatile impl::enable_if_has_tuple_size<T>> : public tuple_size<T> { };
	template<typename T> struct tuple_size<const volatile impl::enable_if_has_tuple_size<T>> : public tuple_size<T> { };

	template<std::size_t, typename> struct tuple_element;
	template<std::size_t i, typename T> using tuple_element_t = typename tuple_element<i, T>::type;

	template<std::size_t i, typename T> struct tuple_element<i, const T>
		{ using type = add_const_t<tuple_element_t<i, T>>; };
	template<std::size_t i, typename T> struct tuple_element<i, volatile T>
		{ using type = add_volatile_t<tuple_element_t<i, T>>; };
	template<std::size_t i, typename T> struct tuple_element<i, const volatile T>
		{ using type = add_cv_t<tuple_element_t<i, T>>; };

	template<typename T, T... idxs> struct integer_sequence
	{
		using value_type = T;
		constexpr static size_t size() noexcept { return sizeof...(idxs); }
	};

	template<typename T, T num> using make_integer_sequence =
#if __has_builtin(__make_integer_seq)
		_make_integer_seq<integer_sequence, T, num>;
#else
		integer_sequence<T, __integer_pack(num)...>;
#endif

	template<size_t... idxs> using index_sequence = integer_sequence<size_t, idxs...>;
	template<size_t num> using make_index_sequence = make_integer_sequence<size_t, num>;
	template<typename... types_t> using index_sequence_for = make_index_sequence<sizeof...(types_t)>;
} // namespace std

#endif /*UTILITY*/
