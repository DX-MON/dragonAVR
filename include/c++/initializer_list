// SPDX-License-Identifier: BSD-3-Clause
#ifndef INITIALIZER_LIST
#define INITIALIZER_LIST

#include <cstddef>

namespace std
{
	template<typename E> struct initializer_list
	{
		using value_type = E;
		using reference = const E &;
		using const_reference = const E &;
		using size_type = size_t;
		using iterator = const E *;
		using const_iterator = const E *;

	private:
		iterator values;
		size_t length;

		constexpr initializer_list(const_iterator vals, size_t len) : values{vals}, length{len} { }

	public:
		constexpr initializer_list() noexcept : values{0}, length{0} { }
		constexpr size_t size() const noexcept { return length; }
		constexpr const_iterator begin() const noexcept { return values; }
		constexpr const_iterator end() const noexcept { return begin() + size(); }
	};

	template<typename T> constexpr const T *begin(initializer_list<T> initList) noexcept
		{ return initList.begin(); }
	template<typename T> constexpr const T *end(initializer_list<T> initList) noexcept
		{ return initList.end(); }
} // namespace std

#endif /*INITIALIZER_LIST*/
