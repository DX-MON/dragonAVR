// SPDX-License-Identifier: BSD-3-Clause
#ifndef ITERATOR
#define ITERATOR

#include <bits/iterator.hxx>

namespace std
{
	template<typename iterator_t> struct reverse_iterator :
		public iterator<typename iterator_traits<iterator_t>::iterator_category,
			typename iterator_traits<iterator_t>::value_type,
			typename iterator_traits<iterator_t>::difference_type,
			typename iterator_traits<iterator_t>::pointer,
			typename iterator_traits<iterator_t>::reference>
	{
	protected:
		iterator_t current;

		template<typename iter_t> friend struct reverse_iterator;
		using traits_type = iterator_traits<iterator_t>;

	public:
		using iterator_type = iterator_t;
		using difference_type = typename traits_type::difference_type;
		using pointer = typename traits_type::pointer;
		using reference = typename traits_type::reference;

		constexpr reverse_iterator() : current{} { }
		constexpr explicit reverse_iterator(iterator_type iter) : current{iter} { }
		constexpr reverse_iterator(const reverse_iterator &iter) : current{iter.current} { }

		reverse_iterator &operator =(const reverse_iterator &) = default;

		template<typename iter_t> constexpr reverse_iterator(const reverse_iterator<iter_t> &iter) :
			current(iter.current) { }

		template<typename iter_t> constexpr reverse_iterator &operator =(const reverse_iterator<iter_t> &iter)
		{
			current = iter.current;
			return *this;
		}

		constexpr iterator_type base() const { return current; }

		constexpr reference operator *() const
		{
			auto result{current};
			return *--result;
		}

		constexpr pointer operator ->() const
		{
			auto result{current};
			--result;
			return _to_pointer(result);
		}

		constexpr reverse_iterator &operator ++()
		{
			--current;
			return *this;
		}

		constexpr reverse_iterator operator ++(int)
		{
			auto result{*this};
			--current;
			return result;
		}

		constexpr reverse_iterator operator --()
		{
			++current;
			return *this;
		}

		constexpr reverse_iterator operator --(int)
		{
			auto result{*this};
			++current;
			return result;
		}

		constexpr reverse_iterator operator +(difference_type n) const
			{ return reverse_iterator{current - n}; }

		constexpr reverse_iterator &operator +=(difference_type n)
		{
			current -= n;
			return *this;
		}

		constexpr reverse_iterator operator -(difference_type n) const
			{ return reverse_iterator{current + n}; }

		constexpr reverse_iterator &operator -=(difference_type n)
		{
			current += n;
			return *this;
		}

		constexpr reference operator [](difference_type n) const
			{ return *(current - n); }

	private:
		template<typename T> constexpr static T *_to_pointer(T *ptr) { return ptr; }
		template<typename T> constexpr static pointer _to_pointer(T value) { return value.operator ->(); }
	};

	template<typename iterA_t, typename iterB_t> constexpr inline bool operator ==(
		const reverse_iterator<iterA_t> &a, const reverse_iterator<iterB_t> &b)
			{ return a.base() == b.base(); }

	template<typename iterA_t, typename iterB_t> constexpr inline bool operator <(
		const reverse_iterator<iterA_t> &a, const reverse_iterator<iterB_t> &b)
			{ return a.base() < b.base(); }

	template<typename iterA_t, typename iterB_t> constexpr inline bool operator !=(
		const reverse_iterator<iterA_t> &a, const reverse_iterator<iterB_t> &b)
			{ return !(a == b); }

	template<typename iterA_t, typename iterB_t> constexpr inline bool operator >(
		const reverse_iterator<iterA_t> &a, const reverse_iterator<iterB_t> &b)
			{ return b < a; }

	template<typename iterA_t, typename iterB_t> constexpr inline bool operator <=(
		const reverse_iterator<iterA_t> &a, const reverse_iterator<iterB_t> &b)
			{ return !(b < a); }

	template<typename iterA_t, typename iterB_t> constexpr inline bool operator >=(
		const reverse_iterator<iterA_t> &a, const reverse_iterator<iterB_t> &b)
			{ return !(a < b); }
} // namespace std

#endif /*ITERATOR*/
